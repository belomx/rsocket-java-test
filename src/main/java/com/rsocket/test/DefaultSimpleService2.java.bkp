package com.rsocket.test;

import java.time.Duration;
import java.util.Optional;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.Function;

import org.reactivestreams.Publisher;

import com.google.protobuf.Empty;
import com.rsocket.interceptor.SessionRSocket;
import com.rsocket.interceptor.SessionRSocketInterceptor;

import io.netty.buffer.ByteBuf;
import io.rsocket.AbstractRSocket;
import io.rsocket.Payload;
import io.rsocket.RSocket;
import io.rsocket.RSocketFactory;
import io.rsocket.rpc.rsocket.RequestHandlingRSocket;
import io.rsocket.rpc.testing.protobuf.SimpleRequest;
import io.rsocket.rpc.testing.protobuf.SimpleResponse;
import io.rsocket.rpc.testing.protobuf.SimpleService;
import io.rsocket.rpc.testing.protobuf.SimpleServiceClient;
import io.rsocket.rpc.testing.protobuf.SimpleServiceServer;
import io.rsocket.transport.netty.client.TcpClientTransport;
import io.rsocket.transport.netty.server.CloseableChannel;
import io.rsocket.transport.netty.server.TcpServerTransport;
import reactor.core.publisher.DirectProcessor;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.core.publisher.SignalType;

public class DefaultSimpleService2 implements SimpleService {	
	
	private final DirectProcessor<SimpleRequest> processor;
	private final Flux<SimpleResponse> responseFlux;	
	
	public DefaultSimpleService2 ()
	{
	    processor = DirectProcessor.create();
	    responseFlux = createResponseFlux();
	}
	
	
	private Flux<SimpleResponse> createResponseFlux() {
		    return processor
		             .log()
		             // map the requests to numbers
		             .map( (x) -> 1 )
		             // add the numbers using scan - this will keep state
		             .scan(0, (i1, i2) -> i1 + i2)
		             // drop messages we don't want to sample
		             .onBackpressureDrop()
		             // sample ever second
		             .sample(Duration.ofSeconds(2))
		             // map the sampled result to a string
		             .map(integer -> SimpleResponse.newBuilder().setResponseMessage("the current total is " + integer).build())
		             // use publish and refCount to allow multiple subscribers
		             .publish()
		             .refCount();
	}
	
//    @Override
//	public Mono<Empty> fireAndForget(SimpleRequest message, ByteBuf metadata) {
//	  System.out.println("got message -> " + message.getRequestMessage());
//	  return Mono.just(Empty.getDefaultInstance());
//	}
    
    @Override
    public Mono<SimpleResponse> requestReply(SimpleRequest message, ByteBuf metadata) {
        return Mono.fromCallable(
          () ->
              SimpleResponse.newBuilder()
                  .setResponseMessage("we got the message -> " + message.getRequestMessage())
                  .build());
    }
    
//    @Override
//    public Mono<SimpleResponse> streamingRequestSingleResponse(Publisher<SimpleRequest> messages, ByteBuf metadata) {
//      return Flux.from(messages)
//          .windowTimeout(10, Duration.ofSeconds(500))
//          .take(1)
//          .flatMap(Function.identity())
//          .reduce(
//              new ConcurrentHashMap<Character, AtomicInteger>(),
//              (map, s) -> {
//                char[] chars = s.getRequestMessage().toCharArray();
//                for (char c : chars) {
//                  map.computeIfAbsent(c, _c -> new AtomicInteger()).incrementAndGet();
//                }
//    
//                return map;
//              })
//          .map(
//              map -> {
//                StringBuilder builder = new StringBuilder();
//    
//                map.forEach(
//                    (character, atomicInteger) -> {
//                      builder
//                          .append("character -> ")
//                          .append(character)
//                          .append(", count -> ")
//                          .append(atomicInteger.get())
//                          .append("\n");
//                    });
//    
//                String s = builder.toString();
//    
//                return SimpleResponse.newBuilder().setResponseMessage(s).build();
//              });
//    }
    
//    @Override
//    public Flux<SimpleResponse> requestStream(SimpleRequest message, ByteBuf metadata) {
//      String requestMessage = message.getRequestMessage();
//      return Flux.interval(Duration.ofMillis(200))
//          .onBackpressureDrop()
//          .map(i -> i + " - got message - " + requestMessage)
//          .map(s -> SimpleResponse.newBuilder().setResponseMessage(s).build());
//    }
    
    @Override
    public Flux<SimpleResponse> streamingRequestAndResponse(Publisher<SimpleRequest> messages, ByteBuf metadata) {
//      return Flux.from(messages)
//    		  .flatMap(e -> requestReply(e, metadata))    		  
//    		  .doFinally((signalType) -> {System.out.println("FIM! - "+signalType);});
    	
    	
    	
        // add the incoming channel to be processed, and limit stream to 8 at a time
    	Flux.from(messages).limitRate(8).subscribe(processor::onNext);
    	return responseFlux;
    }   
        
    public static void startServer ()
    {
    	SimpleServiceServer serviceServer = 
    			new SimpleServiceServer(new DefaultSimpleService2(), Optional.empty(), Optional.empty());
    	RSocketFactory
    	        .receive()
//    	        .addServerPlugin( (sendingSocket) -> {
//    	        	SessionRSocket session = new SessionRSocket(sendingSocket);
//    	        	return session;
//    	        })
    	        .acceptor((setup, sendingSocket) -> {
//    	        	SimpleServiceServer serviceServer = 
//    	        			new SimpleServiceServer(new DefaultSimpleService(), Optional.empty(), Optional.empty());
    	        	return Mono.just(serviceServer);
    	        	})
    	        .transport(TcpServerTransport.create(8081))
    	        .start()
    	        .block();
    }
    
    public static void main (String args[]) throws InterruptedException
    {
    	startServer();
    	Thread.currentThread().join();  	
    }
    
}
